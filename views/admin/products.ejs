<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Products - Campus Cart</title>
    <style>
        body {
            display: flex;
            margin: 0;
            flex-direction: column;
            font-family: Arial, sans-serif;
        }
        .navbar {
            display: flex;
            align-items: center;
            background-color: #020101;
            color: white;
            padding: 10px 20px;
            height: 60px;
            width: 100%;
        }
        .navbar img {
            height: 60px;
            margin-right: 20px;
        }
        .navbar h1 {
            margin: 0;
            font-size: 24px;
        }
        .main-container {
            display: flex;
            height: calc(100vh - 60px);
        }
        .sidebar {
            width: 180px;
            background-color: #020101;
            color: white;
            padding: 20px;
            height: calc(100vh - 60px);
            position: relative;
        }
        .sidebar h2 {
            margin-bottom: 20px;
        }
        .sidebar ul {
            list-style-type: none;
            padding: 0;
        }
        .sidebar ul li {
            margin: 10px 0;
        }
        .sidebar ul li a {
            color: white;
            text-decoration: none;
            display: block;
            padding: 10px;
            transition: background 0.3s;
            border-radius: 4px;
        }
        .sidebar ul li a:hover {
            background: #333;
        }
        .content {
            flex: 1;
            padding: 20px;
            background-color: #f5f5f7;
            overflow-y: auto;
        }
        .user-info {
            margin-top: auto;
            padding-top: 20px;
            border-top: 1px solid #333;
            font-size: 14px;
        }
        .user-info p {
            margin: 5px 0;
            color: #ddd;
        }
        .form-container {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .form-container h3 {
            margin-top: 0;
            color: #333;
            margin-bottom: 15px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .form-group input, .form-group textarea, .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .form-group textarea {
            height: 80px;
            resize: vertical;
        }
        button {
            background-color: #020101;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        button:hover {
            background-color: #333;
        }
        .product-table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .product-table th, .product-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        .product-table th {
            background-color: #020101;
            color: white;
            font-weight: normal;
        }
        .product-table tr:last-child td {
            border-bottom: none;
        }
        .product-table tr:hover {
            background-color: #f5f5f5;
        }
        .actions {
            display: flex;
            gap: 10px;
        }
        .edit-btn, .delete-btn {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
        }
        .edit-btn {
            background-color: #3498db;
            color: white;
        }
        .delete-btn {
            background-color: #e74c3c;
            color: white;
        }
        .success-message, .error-message {
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            display: none;
        }
        .success-message {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error-message {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            width: 50%;
            max-width: 500px;
        }
        .close {
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <img src="/images/Campus Cart Logo.jpg" alt="Campus Cart Logo">
        <h1>CAMPUS CART ADMIN</h1>
    </div>
    <div class="main-container">
        <div class="sidebar">
            <h2>Admin Panel</h2>
            <ul>
                <li><a href="/admin/dashboard">Dashboard</a></li>
                <li><a href="/admin/products">Manage Products</a></li>
                <li><a href="/admin/orders">Manage Orders</a></li>
                <li><a href="/admin/users">Manage Users</a></li>
                <li><a href="/admin/logout">Logout</a></li>
            </ul>
            <div class="user-info">
                <p>Logged in as:</p>
                <p><strong><%= userData.name %></strong></p>
                <p><%= userData.email %></p>
                <p>Role: <%= userData.role %></p>
            </div>
        </div>
        <div class="content">
            <h2>Product Management</h2>
            
            <div class="success-message" id="success-message"></div>
            <div class="error-message" id="error-message"></div>

            <div class="form-container">
                <h3>Add New Product</h3>
                <form id="add-product-form">
                    <div class="form-group">
                        <label for="add-name">Product Name</label>
                        <input type="text" id="add-name" required>
                    </div>
                    <div class="form-group">
                        <label for="add-category">Category</label>
                        <select id="add-category" required>
                            <option value="">Select Category</option>
                            <option value="stationery">Stationery</option>
                            <option value="cold-drinks-juice">Cold Drinks & Juice</option>
                            <option value="breakfast-instant-food">Breakfast & Instant Food</option>
                            <option value="coffee-tea">Coffee & Tea</option>
                            <option value="packed-food">Packed Food</option>
                            <option value="chocolates-candy">Chocolates & Candy</option>
                            <option value="ice-cream">Ice Cream</option>
                            <option value="printing-xerox">Printing & Xerox</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="add-price">Price (â‚¹)</label>
                        <input type="number" id="add-price" min="0" step="0.01" required>
                    </div>
                    <div class="form-group">
                        <label for="add-stock">Stock Quantity</label>
                        <input type="number" id="add-stock" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="add-description">Description</label>
                        <textarea id="add-description"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="add-image">Image Path</label>
                        <input type="text" id="add-image" placeholder="/images/sample-product.jpg">
                    </div>
                    <button type="submit">Add Product</button>
                </form>
            </div>

            <table class="product-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Price</th>
                        <th>Stock</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="product-list">
                    <!-- Products will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Edit Product Modal -->
    <div id="edit-modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h3>Edit Product</h3>
            <form id="edit-product-form">
                <input type="hidden" id="edit-id">
                <div class="form-group">
                    <label for="edit-name">Product Name</label>
                    <input type="text" id="edit-name" required>
                </div>
                <div class="form-group">
                    <label for="edit-category">Category</label>
                    <select id="edit-category" required>
                        <option value="">Select Category</option>
                        <option value="stationery">Stationery</option>
                        <option value="cold-drinks-juice">Cold Drinks & Juice</option>
                        <option value="breakfast-instant-food">Breakfast & Instant Food</option>
                        <option value="coffee-tea">Coffee & Tea</option>
                        <option value="packed-food">Packed Food</option>
                        <option value="chocolates-candy">Chocolates & Candy</option>
                        <option value="ice-cream">Ice Cream</option>
                        <option value="printing-xerox">Printing & Xerox</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="edit-price">Price (â‚¹)</label>
                    <input type="number" id="edit-price" min="0" step="0.01" required>
                </div>
                <div class="form-group">
                    <label for="edit-stock">Stock Quantity</label>
                    <input type="number" id="edit-stock" min="0" required>
                </div>
                <div class="form-group">
                    <label for="edit-description">Description</label>
                    <textarea id="edit-description"></textarea>
                </div>
                <div class="form-group">
                    <label for="edit-image">Image Path</label>
                    <input type="text" id="edit-image">
                </div>
                <button type="submit">Update Product</button>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            loadProducts();
            
            // Add product form submit
            document.getElementById('add-product-form').addEventListener('submit', function(e) {
                e.preventDefault();
                addProduct();
            });
            
            // Edit product form submit
            document.getElementById('edit-product-form').addEventListener('submit', function(e) {
                e.preventDefault();
                updateProduct();
            });
            
            // Close modal when clicking the close button
            document.querySelector('.close').addEventListener('click', function() {
                document.getElementById('edit-modal').style.display = 'none';
            });
            
            // Close modal when clicking outside the modal
            window.addEventListener('click', function(event) {
                const modal = document.getElementById('edit-modal');
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        });
        
        // Load all products
        async function loadProducts() {
            try {
                const response = await fetch('/api/products');
                const data = await response.json();
                
                if (data.success) {
                    const productList = document.getElementById('product-list');
                    productList.innerHTML = '';
                    
                    data.products.forEach(product => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${product.name}</td>
                            <td>${formatCategory(product.category)}</td>
                            <td>â‚¹${product.price.toFixed(2)}</td>
                            <td>${product.stock}</td>
                            <td class="actions">
                                <button class="edit-btn" onclick="openEditModal('${product._id}')">Edit</button>
                                <button class="delete-btn" onclick="deleteProduct('${product._id}')">Delete</button>
                            </td>
                        `;
                        productList.appendChild(row);
                    });
                }
            } catch (error) {
                showError('Failed to load products');
                console.error(error);
            }
        }
        
        // Add new product
        async function addProduct() {
            const name = document.getElementById('add-name').value;
            const category = document.getElementById('add-category').value;
            const price = document.getElementById('add-price').value;
            const stock = document.getElementById('add-stock').value;
            const description = document.getElementById('add-description').value;
            const imagePath = document.getElementById('add-image').value || '/images/sample-product.jpg';
            
            try {
                const response = await fetch('/api/admin/products', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name,
                        category,
                        price,
                        stock,
                        description,
                        imagePath
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess('Product added successfully');
                    document.getElementById('add-product-form').reset();
                    loadProducts();
                } else {
                    showError(data.message || 'Failed to add product');
                }
            } catch (error) {
                showError('Failed to add product');
                console.error(error);
            }
        }
        
        // Open edit modal with product data
        async function openEditModal(productId) {
            try {
                const response = await fetch(`/api/products/${productId}`);
                const data = await response.json();
                
                if (data.success) {
                    const product = data.product;
                    
                    document.getElementById('edit-id').value = product._id;
                    document.getElementById('edit-name').value = product.name;
                    document.getElementById('edit-category').value = product.category;
                    document.getElementById('edit-price').value = product.price;
                    document.getElementById('edit-stock').value = product.stock;
                    document.getElementById('edit-description').value = product.description || '';
                    document.getElementById('edit-image').value = product.imagePath || '/images/sample-product.jpg';
                    
                    document.getElementById('edit-modal').style.display = 'block';
                } else {
                    showError(data.message || 'Failed to load product details');
                }
            } catch (error) {
                showError('Failed to load product details');
                console.error(error);
            }
        }
        
        // Update product
        async function updateProduct() {
            const productId = document.getElementById('edit-id').value;
            const name = document.getElementById('edit-name').value;
            const category = document.getElementById('edit-category').value;
            const price = document.getElementById('edit-price').value;
            const stock = document.getElementById('edit-stock').value;
            const description = document.getElementById('edit-description').value;
            const imagePath = document.getElementById('edit-image').value;
            
            try {
                const response = await fetch(`/api/admin/products/${productId}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name,
                        category,
                        price,
                        stock,
                        description,
                        imagePath
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess('Product updated successfully');
                    document.getElementById('edit-modal').style.display = 'none';
                    loadProducts();
                } else {
                    showError(data.message || 'Failed to update product');
                }
            } catch (error) {
                showError('Failed to update product');
                console.error(error);
            }
        }
        
        // Delete product
        async function deleteProduct(productId) {
            if (!confirm('Are you sure you want to delete this product?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/admin/products/${productId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess('Product deleted successfully');
                    loadProducts();
                } else {
                    showError(data.message || 'Failed to delete product');
                }
            } catch (error) {
                showError('Failed to delete product');
                console.error(error);
            }
        }
        
        // Helper functions
        function showSuccess(message) {
            const successMsg = document.getElementById('success-message');
            successMsg.textContent = message;
            successMsg.style.display = 'block';
            setTimeout(() => {
                successMsg.style.display = 'none';
            }, 3000);
        }
        
        function showError(message) {
            const errorMsg = document.getElementById('error-message');
            errorMsg.textContent = message;
            errorMsg.style.display = 'block';
            setTimeout(() => {
                errorMsg.style.display = 'none';
            }, 3000);
        }
        
        function formatCategory(category) {
            return category
                .split('-')
                .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                .join(' & ');
        }
    </script>
</body>
</html> 