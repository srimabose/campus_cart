<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Orders - Campus Cart</title>
    <style>
        body {
            display: flex;
            margin: 0;
            flex-direction: column;
            font-family: Arial, sans-serif;
        }
        .navbar {
            display: flex;
            align-items: center;
            background-color: #020101;
            color: white;
            padding: 10px 20px;
            height: 60px;
            width: 100%;
        }
        .navbar img {
            height: 60px;
            margin-right: 20px;
        }
        .navbar h1 {
            margin: 0;
            font-size: 24px;
        }
        .main-container {
            display: flex;
            height: calc(100vh - 60px);
        }
        .sidebar {
            width: 180px;
            background-color: #020101;
            color: white;
            padding: 20px;
            height: calc(100vh - 60px);
            position: relative;
        }
        .sidebar h2 {
            margin-bottom: 20px;
        }
        .sidebar ul {
            list-style-type: none;
            padding: 0;
        }
        .sidebar ul li {
            margin: 10px 0;
        }
        .sidebar ul li a {
            color: white;
            text-decoration: none;
            display: block;
            padding: 10px;
            transition: background 0.3s;
            border-radius: 4px;
        }
        .sidebar ul li a:hover {
            background: #333;
        }
        .content {
            flex: 1;
            padding: 20px;
            background-color: #f5f5f7;
            overflow-y: auto;
        }
        .user-info {
            margin-top: auto;
            padding-top: 20px;
            border-top: 1px solid #333;
            font-size: 14px;
        }
        .user-info p {
            margin: 5px 0;
            color: #ddd;
        }
        .order-table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        .order-table th, .order-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        .order-table th {
            background-color: #020101;
            color: white;
            font-weight: normal;
        }
        .order-table tr:last-child td {
            border-bottom: none;
        }
        .order-table tr:hover {
            background-color: #f5f5f5;
        }
        .status {
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            display: inline-block;
        }
        .status-pending {
            background-color: #ffeeba;
            color: #856404;
        }
        .status-processing {
            background-color: #bee5eb;
            color: #0c5460;
        }
        .status-ready {
            background-color: #d4edda;
            color: #155724;
        }
        .status-completed {
            background-color: #c3e6cb;
            color: #155724;
        }
        .status-cancelled {
            background-color: #f5c6cb;
            color: #721c24;
        }
        .action-btn {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            background-color: #3498db;
            color: white;
            margin-right: 5px;
        }
        .action-btn:hover {
            background-color: #2980b9;
        }
        .order-details {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            margin-top: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            display: none;
        }
        .order-details h3 {
            margin-top: 0;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .order-products {
            margin-top: 15px;
        }
        .order-product-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        .order-product-item:last-child {
            border-bottom: none;
        }
        .product-details {
            flex: 1;
        }
        .product-quantity {
            width: 80px;
            text-align: center;
        }
        .product-price {
            width: 100px;
            text-align: right;
        }
        .order-total {
            margin-top: 15px;
            text-align: right;
            font-weight: bold;
        }
        .update-status {
            display: flex;
            align-items: center;
            margin-top: 15px;
        }
        .update-status select {
            margin-right: 10px;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .order-filter {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .order-filter select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .success-message, .error-message {
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            display: none;
        }
        .success-message {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error-message {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <img src="/images/Campus Cart Logo.jpg" alt="Campus Cart Logo">
        <h1>CAMPUS CART ADMIN</h1>
    </div>
    <div class="main-container">
        <div class="sidebar">
            <h2>Admin Panel</h2>
            <ul>
                <li><a href="/admin/dashboard">Dashboard</a></li>
                <li><a href="/admin/products">Manage Products</a></li>
                <li><a href="/admin/orders">Manage Orders</a></li>
                <li><a href="/admin/users">Manage Users</a></li>
                <li><a href="/admin/logout">Logout</a></li>
            </ul>
            <div class="user-info">
                <p>Logged in as:</p>
                <p><strong><%= userData.name %></strong></p>
                <p><%= userData.email %></p>
                <p>Role: <%= userData.role %></p>
            </div>
        </div>
        <div class="content">
            <h2>Order Management</h2>
            
            <div class="success-message" id="success-message"></div>
            <div class="error-message" id="error-message"></div>
            
            <div class="order-filter">
                <select id="status-filter">
                    <option value="all">All Orders</option>
                    <option value="pending">Pending</option>
                    <option value="processing">Processing</option>
                    <option value="ready">Ready</option>
                    <option value="completed">Completed</option>
                    <option value="cancelled">Cancelled</option>
                </select>
            </div>
            
            <table class="order-table">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Customer</th>
                        <th>Date</th>
                        <th>Total</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="order-list">
                    <!-- Orders will be loaded here -->
                </tbody>
            </table>
            
            <div class="order-details" id="order-details">
                <h3>Order Details <span id="order-id"></span></h3>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 20px;">
                    <div style="border: 1px solid #eee; padding: 15px; border-radius: 6px; background-color: #f9f9f9;">
                        <h4 style="margin-top: 0; margin-bottom: 12px; border-bottom: 1px solid #ddd; padding-bottom: 8px;">Customer Information</h4>
                        <p><strong>Name:</strong> <span id="customer-name"></span></p>
                        <p><strong>Email:</strong> <span id="customer-email"></span></p>
                        <p><strong>Mobile:</strong> <span id="customer-mobile"></span></p>
                    </div>
                    <div style="border: 1px solid #eee; padding: 15px; border-radius: 6px; background-color: #f9f9f9;">
                        <h4 style="margin-top: 0; margin-bottom: 12px; border-bottom: 1px solid #ddd; padding-bottom: 8px;">Order Information</h4>
                        <p><strong>Date:</strong> <span id="order-date"></span></p>
                        <p><strong>Order ID:</strong> <span id="order-full-id"></span></p>
                        <p><strong>Payment Method:</strong> <span id="payment-mode"></span></p>
                    </div>
                </div>
                
                <div style="border: 1px solid #eee; padding: 15px; border-radius: 6px; background-color: #f9f9f9; margin-bottom: 20px;">
                    <h4 style="margin-top: 0; margin-bottom: 12px; border-bottom: 1px solid #ddd; padding-bottom: 8px;">Pickup Details</h4>
                    <p><strong>Date:</strong> <span id="pickup-date"></span></p>
                    <p><strong>Time:</strong> <span id="pickup-time"></span></p>
                </div>
                
                <div style="border: 1px solid #eee; padding: 15px; border-radius: 6px; background-color: #f9f9f9; margin-bottom: 20px;">
                    <h4 style="margin-top: 0; margin-bottom: 12px; border-bottom: 1px solid #ddd; padding-bottom: 8px;">Status Information</h4>
                    <p><strong>Current Status:</strong> <span id="order-status" style="font-weight: bold;"></span></p>
                    <p><strong>Created At:</strong> <span id="created-at"></span></p>
                    <div class="update-status" style="margin-top: 10px;">
                        <select id="update-status">
                            <option value="pending">Pending</option>
                            <option value="processing">Processing</option>
                            <option value="ready">Ready</option>
                            <option value="completed">Completed</option>
                            <option value="cancelled">Cancelled</option>
                        </select>
                        <button onclick="updateOrderStatus()">Update Status</button>
                    </div>
                </div>
                
                <div style="border: 1px solid #eee; padding: 15px; border-radius: 6px; background-color: #f9f9f9; margin-bottom: 20px;">
                    <h4 style="margin-top: 0; margin-bottom: 12px; border-bottom: 1px solid #ddd; padding-bottom: 8px;">Order Items</h4>
                    <div class="order-products" id="order-products" style="max-height: 300px; overflow-y: auto;">
                        <!-- Order products will be loaded here -->
                    </div>
                    
                    <div class="order-total" style="margin-top: 15px; padding-top: 10px; border-top: 1px solid #ddd;">
                        <strong>Total Amount: ₹<span id="order-total"></span></strong>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            loadOrders();
            
            // Status filter change event
            document.getElementById('status-filter').addEventListener('change', function() {
                loadOrders(this.value);
            });
        });
        
        // Load all orders
        async function loadOrders(statusFilter = 'all') {
            try {
                const response = await fetch('/api/admin/orders');
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    const orderList = document.getElementById('order-list');
                    orderList.innerHTML = '';
                    
                    if (!data.orders || data.orders.length === 0) {
                        orderList.innerHTML = '<tr><td colspan="6" style="text-align: center;">No orders found</td></tr>';
                        return;
                    }
                    
                    const filteredOrders = statusFilter === 'all' 
                        ? data.orders 
                        : data.orders.filter(order => order.status === statusFilter);
                    
                    if (filteredOrders.length === 0) {
                        orderList.innerHTML = '<tr><td colspan="6" style="text-align: center;">No orders match the selected filter</td></tr>';
                        return;
                    }
                    
                    filteredOrders.forEach(order => {
                        const date = new Date(order.createdAt || Date.now()).toLocaleDateString();
                        const total = calculateOrderTotal(order);
                        
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${order._id.substring(0, 8)}...</td>
                            <td>${order.userId?.name || order.customer?.name || 'Unknown'}</td>
                            <td>${date}</td>
                            <td>₹${total.toFixed(2)}</td>
                            <td><span class="status status-${order.status}">${capitalizeFirstLetter(order.status)}</span></td>
                            <td>
                                <button class="action-btn" onclick="viewOrderDetails('${order._id}')">View</button>
                            </td>
                        `;
                        orderList.appendChild(row);
                    });
                } else {
                    showError(data.message || 'Failed to load orders');
                }
            } catch (error) {
                showError(`Failed to load orders: ${error.message}`);
                console.error('Error details:', error);
            }
        }
        
        // View order details
        async function viewOrderDetails(orderId) {
            try {
                const response = await fetch('/api/admin/orders');
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    const order = data.orders.find(o => o._id === orderId);
                    
                    if (order) {
                        // Basic order info
                        document.getElementById('order-id').textContent = `#${order._id.substring(0, 8)}...`;
                        document.getElementById('order-full-id').textContent = order._id;
                        document.getElementById('order-date').textContent = new Date(order.createdAt || Date.now()).toLocaleString();
                        document.getElementById('created-at').textContent = new Date(order.createdAt || Date.now()).toLocaleString();
                        
                        // Customer info
                        document.getElementById('customer-name').textContent = order.userId?.name || order.customer?.name || 'Unknown';
                        document.getElementById('customer-email').textContent = order.userId?.email || order.customer?.email || 'Unknown';
                        document.getElementById('customer-mobile').textContent = order.customer?.mobile || 'N/A';
                        
                        // Payment and status
                        document.getElementById('payment-mode').textContent = capitalizeFirstLetter(order.paymentMode || 'N/A');
                        document.getElementById('order-status').textContent = capitalizeFirstLetter(order.status);
                        document.getElementById('update-status').value = order.status;
                        
                        // Pickup details
                        if (order.pickup) {
                            document.getElementById('pickup-date').textContent = order.pickup.date || 'N/A';
                            document.getElementById('pickup-time').textContent = order.pickup.time || 'N/A';
                        } else {
                            document.getElementById('pickup-date').textContent = 'N/A';
                            document.getElementById('pickup-time').textContent = 'N/A';
                        }
                        
                        // Load order products
                        const orderProducts = document.getElementById('order-products');
                        orderProducts.innerHTML = '';
                        
                        let total = 0;
                        let products = [];
                        
                        // Determine which property to use for products
                        if (order.items && order.items.length > 0) {
                            products = order.items;
                        } else if (order.products && order.products.length > 0) {
                            products = order.products;
                        }
                        
                        if (products.length > 0) {
                            products.forEach(product => {
                                const productTotal = product.price * product.quantity;
                                total += productTotal;
                                
                                const productItem = document.createElement('div');
                                productItem.className = 'order-product-item';
                                
                                // Format print job details specially
                                let detailsHtml = '';
                                if (product.type === 'print' && product.details) {
                                    // Format details for print jobs
                                    const details = product.details;
                                    detailsHtml = `
                                        <div style="margin-top: 8px; padding: 8px; background-color: #f5f5f5; border-radius: 4px; font-size: 13px;">
                                            <div><strong>File:</strong> ${details.fileName || 'Unnamed file'}</div>
                                            <div><strong>Copies:</strong> ${details.copies || product.quantity}</div>
                                            <div><strong>Print Type:</strong> ${details.isColor ? 'Color' : 'Black & White'}</div>
                                            <div><strong>Sides:</strong> ${details.isDoubleSided ? 'Double-sided' : 'Single-sided'}</div>
                                            <div><strong>Paper:</strong> ${details.isPremiumPaper ? 'Premium Paper' : 'Standard Paper'}</div>
                                            ${details.notes ? `<div><strong>Notes:</strong> ${details.notes}</div>` : ''}
                                            ${details.pageRange ? `<div><strong>Page Range:</strong> ${details.pageRange}</div>` : ''}
                                        </div>
                                    `;
                                } else if (product.details) {
                                    // For other product types with details
                                    detailsHtml = `<div style="margin-top: 5px; font-size: 13px; color: #666;">Additional info: ${JSON.stringify(product.details)}</div>`;
                                }
                                
                                productItem.innerHTML = `
                                    <div class="product-details">
                                        <div><strong>${product.name}</strong></div>
                                        <div>₹${product.price.toFixed(2)} each</div>
                                        ${product.type === 'print' ? '<div style="font-style: italic; color: #0066cc;">Print Job</div>' : ''}
                                        ${detailsHtml}
                                    </div>
                                    <div class="product-quantity">x ${product.quantity}</div>
                                    <div class="product-price">₹${productTotal.toFixed(2)}</div>
                                `;
                                orderProducts.appendChild(productItem);
                            });
                        } else {
                            // If no products/items but total exists
                            total = order.total || 0;
                            const noProductsMsg = document.createElement('div');
                            noProductsMsg.innerHTML = '<p>No detailed product information available</p>';
                            orderProducts.appendChild(noProductsMsg);
                        }
                        
                        document.getElementById('order-total').textContent = total.toFixed(2);
                        
                        // Store the current order ID for status updates
                        document.getElementById('update-status').dataset.orderId = orderId;
                        
                        // Show the order details section
                        document.getElementById('order-details').style.display = 'block';
                    } else {
                        showError('Order not found');
                    }
                } else {
                    showError(data.message || 'Failed to load order details');
                }
            } catch (error) {
                showError(`Failed to load order details: ${error.message}`);
                console.error('Error details:', error);
            }
        }
        
        // Update order status
        async function updateOrderStatus() {
            const status = document.getElementById('update-status').value;
            const orderId = document.getElementById('update-status').dataset.orderId;
            
            if (!orderId) {
                return;
            }
            
            try {
                const response = await fetch('/api/admin/orders/update-status', {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId,
                        status
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess('Order status updated successfully');
                    loadOrders(document.getElementById('status-filter').value);
                    document.getElementById('order-status').textContent = capitalizeFirstLetter(status);
                } else {
                    showError(data.message || 'Failed to update order status');
                }
            } catch (error) {
                showError('Failed to update order status');
                console.error(error);
            }
        }
        
        // Helper functions
        function calculateOrderTotal(order) {
            // Check if the order has items or products property
            if (order.items && order.items.length > 0) {
                return order.items.reduce((total, item) => {
                    return total + (item.price * item.quantity);
                }, 0);
            } else if (order.products && order.products.length > 0) {
                return order.products.reduce((total, product) => {
                    return total + (product.price * product.quantity);
                }, 0);
            } else if (order.total) {
                // If neither items nor products exist, but total is set
                return order.total;
            }
            return 0;
        }
        
        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
        
        function showSuccess(message) {
            const successMsg = document.getElementById('success-message');
            successMsg.textContent = message;
            successMsg.style.display = 'block';
            setTimeout(() => {
                successMsg.style.display = 'none';
            }, 3000);
        }
        
        function showError(message) {
            const errorMsg = document.getElementById('error-message');
            errorMsg.textContent = message;
            errorMsg.style.display = 'block';
            setTimeout(() => {
                errorMsg.style.display = 'none';
            }, 3000);
        }
    </script>
</body>
</html> 