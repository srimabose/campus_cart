<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Users - Campus Cart</title>
    <style>
        body {
            display: flex;
            margin: 0;
            flex-direction: column;
            font-family: Arial, sans-serif;
        }
        .navbar {
            display: flex;
            align-items: center;
            background-color: #020101;
            color: white;
            padding: 10px 20px;
            height: 60px;
            width: 100%;
        }
        .navbar img {
            height: 60px;
            margin-right: 20px;
        }
        .navbar h1 {
            margin: 0;
            font-size: 24px;
        }
        .main-container {
            display: flex;
            height: calc(100vh - 60px);
        }
        .sidebar {
            width: 180px;
            background-color: #020101;
            color: white;
            padding: 20px;
            height: calc(100vh - 60px);
            position: relative;
        }
        .sidebar h2 {
            margin-bottom: 20px;
        }
        .sidebar ul {
            list-style-type: none;
            padding: 0;
        }
        .sidebar ul li {
            margin: 10px 0;
        }
        .sidebar ul li a {
            color: white;
            text-decoration: none;
            display: block;
            padding: 10px;
            transition: background 0.3s;
            border-radius: 4px;
        }
        .sidebar ul li a:hover {
            background: #333;
        }
        .content {
            flex: 1;
            padding: 20px;
            background-color: #f5f5f7;
            overflow-y: auto;
        }
        .user-info {
            margin-top: auto;
            padding-top: 20px;
            border-top: 1px solid #333;
            font-size: 14px;
        }
        .user-info p {
            margin: 5px 0;
            color: #ddd;
        }
        .user-table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        .user-table th, .user-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        .user-table th {
            background-color: #020101;
            color: white;
            font-weight: normal;
        }
        .user-table tr:last-child td {
            border-bottom: none;
        }
        .user-table tr:hover {
            background-color: #f5f5f5;
        }
        .badge {
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            display: inline-block;
        }
        .badge-user {
            background-color: #e9ecef;
            color: #495057;
        }
        .badge-admin {
            background-color: #cce5ff;
            color: #004085;
        }
        .badge-superadmin {
            background-color: #d1ecf1;
            color: #0c5460;
        }
        .badge-verified {
            background-color: #d4edda;
            color: #155724;
        }
        .badge-unverified {
            background-color: #f8d7da;
            color: #721c24;
        }
        .edit-btn {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            background-color: #3498db;
            color: white;
        }
        .edit-btn:hover {
            background-color: #2980b9;
        }
        .user-filter {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .user-filter select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .success-message, .error-message {
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            display: none;
        }
        .success-message {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error-message {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            width: 400px;
        }
        .close {
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <img src="/images/Campus Cart Logo.jpg" alt="Campus Cart Logo">
        <h1>CAMPUS CART ADMIN</h1>
    </div>
    <div class="main-container">
        <div class="sidebar">
            <h2>Admin Panel</h2>
            <ul>
                <li><a href="/admin/dashboard">Dashboard</a></li>
                <li><a href="/admin/products">Manage Products</a></li>
                <li><a href="/admin/orders">Manage Orders</a></li>
                <li><a href="/admin/users">Manage Users</a></li>
                <li><a href="/admin/logout">Logout</a></li>
            </ul>
            <div class="user-info">
                <p>Logged in as:</p>
                <p><strong><%= userData.name %></strong></p>
                <p><%= userData.email %></p>
                <p>Role: <%= userData.role %></p>
            </div>
        </div>
        <div class="content">
            <h2>User Management</h2>
            
            <div class="success-message" id="success-message"></div>
            <div class="error-message" id="error-message"></div>
            
            <div class="user-filter">
                <select id="role-filter">
                    <option value="all">All Users</option>
                    <option value="user">Regular Users</option>
                    <option value="admin">Admins</option>
                    <option value="superadmin">Super Admins</option>
                </select>
                <select id="verification-filter">
                    <option value="all">All Verification Status</option>
                    <option value="verified">Verified</option>
                    <option value="unverified">Unverified</option>
                </select>
            </div>
            
            <table class="user-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Verification</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="user-list">
                    <!-- Users will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Edit User Role Modal -->
    <div id="edit-role-modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h3>Change User Role</h3>
            <form id="edit-role-form">
                <input type="hidden" id="edit-user-id">
                <div class="form-group">
                    <label for="edit-user-name">User</label>
                    <input type="text" id="edit-user-name" readonly style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: #f5f5f5;">
                </div>
                <div class="form-group">
                    <label for="edit-user-role">Role</label>
                    <select id="edit-user-role" required>
                        <option value="user">Regular User</option>
                        <option value="admin">Admin</option>
                        <% if (userData.role === 'superadmin') { %>
                        <option value="superadmin">Super Admin</option>
                        <% } %>
                    </select>
                </div>
                <button type="submit" style="background-color: #020101; color: white; border: none; padding: 10px; width: 100%; border-radius: 4px; cursor: pointer; font-size: 14px;">Update Role</button>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            loadUsers();
            
            // Filter change events
            document.getElementById('role-filter').addEventListener('change', function() {
                applyFilters();
            });
            
            document.getElementById('verification-filter').addEventListener('change', function() {
                applyFilters();
            });
            
            // Edit role form submit
            document.getElementById('edit-role-form').addEventListener('submit', function(e) {
                e.preventDefault();
                updateUserRole();
            });
            
            // Close modals when clicking the close button
            document.querySelectorAll('.close').forEach(closeBtn => {
                closeBtn.addEventListener('click', function() {
                    document.querySelectorAll('.modal').forEach(modal => {
                        modal.style.display = 'none';
                    });
                });
            });
            
            // Close modals when clicking outside
            window.addEventListener('click', function(event) {
                document.querySelectorAll('.modal').forEach(modal => {
                    if (event.target === modal) {
                        modal.style.display = 'none';
                    }
                });
            });
        });
        
        // Load all users
        async function loadUsers() {
            try {
                const response = await fetch('/api/admin/users');
                const data = await response.json();
                
                if (data.success) {
                    window.allUsers = data.users;
                    applyFilters();
                }
            } catch (error) {
                showError('Failed to load users');
                console.error(error);
            }
        }
        
        // Apply filters
        function applyFilters() {
            if (!window.allUsers) return;
            
            const roleFilter = document.getElementById('role-filter').value;
            const verificationFilter = document.getElementById('verification-filter').value;
            
            let filteredUsers = [...window.allUsers];
            
            // Apply role filter
            if (roleFilter !== 'all') {
                filteredUsers = filteredUsers.filter(user => user.role === roleFilter);
            }
            
            // Apply verification filter
            if (verificationFilter !== 'all') {
                const isVerified = verificationFilter === 'verified';
                filteredUsers = filteredUsers.filter(user => user.isAccountVerified === isVerified);
            }
            
            renderUsers(filteredUsers);
        }
        
        // Render users
        function renderUsers(users) {
            const userList = document.getElementById('user-list');
            userList.innerHTML = '';
            
            users.forEach(user => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${user.name}</td>
                    <td>${user.email}</td>
                    <td><span class="badge badge-${user.role}">${capitalizeFirstLetter(user.role)}</span></td>
                    <td><span class="badge badge-${user.isAccountVerified ? 'verified' : 'unverified'}">${user.isAccountVerified ? 'Verified' : 'Unverified'}</span></td>
                    <td><button class="edit-btn" onclick="openEditRoleModal('${user._id}', '${user.name}', '${user.role}')">Edit Role</button></td>
                `;
                userList.appendChild(row);
            });
        }
        
        // Open edit role modal
        function openEditRoleModal(userId, name, role) {
            document.getElementById('edit-user-id').value = userId;
            document.getElementById('edit-user-name').value = name;
            document.getElementById('edit-user-role').value = role;
            document.getElementById('edit-role-modal').style.display = 'block';
        }
        
        // Update user role
        async function updateUserRole() {
            const userId = document.getElementById('edit-user-id').value;
            const role = document.getElementById('edit-user-role').value;
            
            try {
                const response = await fetch('/api/admin/users/update-role', {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId,
                        role
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess('User role updated successfully');
                    document.getElementById('edit-role-modal').style.display = 'none';
                    loadUsers();
                } else {
                    showError(data.message || 'Failed to update user role');
                }
            } catch (error) {
                showError('Failed to update user role');
                console.error(error);
            }
        }
        
        // Helper functions
        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
        
        function showSuccess(message) {
            const successMsg = document.getElementById('success-message');
            successMsg.textContent = message;
            successMsg.style.display = 'block';
            setTimeout(() => {
                successMsg.style.display = 'none';
            }, 3000);
        }
        
        function showError(message) {
            const errorMsg = document.getElementById('error-message');
            errorMsg.textContent = message;
            errorMsg.style.display = 'block';
            setTimeout(() => {
                errorMsg.style.display = 'none';
            }, 3000);
        }
    </script>
</body>
</html> 